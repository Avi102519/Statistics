# -*- coding: utf-8 -*-
"""Mood Classification using CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zbU6tmApQsECD0bza3velXZ85l3rcbih
"""

!nvidia-smi

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import tensorflow as tf
import numpy as np
import cv2
import os
import tensorflow as tf
import numpy as np
import cv2
import os

img = image.load_img('/content/drive/MyDrive/12-CNN practice/Training/Happy/7.jpeg')

plt.imshow(img)

i1=cv2.imread(r'/content/drive/MyDrive/12-CNN practice/Training/Happy/7.jpeg')
i1

from google.colab import drive
drive.mount('/content/drive')

i1.shape

train = ImageDataGenerator(rescale = 1/255)
validation = ImageDataGenerator(rescale = 1/255)

t = train.flow_from_directory(directory='/content/drive/MyDrive/12-CNN practice/Training',
                              target_size=(200,200),
                              batch_size=3,
                              class_mode='binary')
v = validation.flow_from_directory(directory='/content/drive/MyDrive/12-CNN practice/Validation',
                                   target_size=(200,200),
                                   batch_size=3,
                                   class_mode='binary')

t.class_indices
#train_dataset.class_indices

#train_dataset.classes
# Access the classes from the training dataset variable 't'
t.classes

model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(16,(3,3),activation = 'relu',input_shape = (200,200,3)),
                                    tf.keras.layers.MaxPool2D(2,2), #3 filtr we applied hear
                                    #
                                    tf.keras.layers.Conv2D(32,(3,3),activation = 'relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    #
                                    tf.keras.layers.Conv2D(64,(3,3),activation = 'relu'),
                                    tf.keras.layers.MaxPool2D(2,2),
                                    ##
                                    tf.keras.layers.Flatten(),
                                    ##
                                    tf.keras.layers.Dense(512, activation = 'relu'),
                                    #
                                    tf.keras.layers.Dense(1,activation= 'sigmoid')
                                    ]
                                    )

model.compile(loss='binary_crossentropy',
              optimizer = tf.keras.optimizers.RMSprop(learning_rate=0.001),
              metrics = ['accuracy']
              )

#model_fit = model.fit(t,
 #                    steps_per_epoch = 3,
  #                   epochs = 10,
   #                  validation_data = v)

model.fit = model.fit(t,epochs = 15)

dir_path = '/content/drive/MyDrive/12-CNN practice/Training'
for i in os.listdir(dir_path):
  print(i)

#dir_path = '/content/drive/MyDrive/12-CNN practice/Training/Happy'
#for i in os.listdir(dir_path ):
 #   img = image.load_img(dir_path+ '//'+i, target_size = (200,200))
  #  plt.imshow(img)
   # plt.show()


dir_path = '/content/drive/MyDrive/12-CNN practice/Training/Happy'
for i in os.listdir(dir_path ):
    # Construct the full path to the item
    full_path = os.path.join(dir_path, i)
    # Check if the item is a file before attempting to load the image
    if os.path.isfile(full_path):
        img = image.load_img(full_path, target_size = (200,200))
        plt.imshow(img)
        plt.show()

dir_path = '/content/drive/MyDrive/12-CNN practice/Training/Sad'
for i in os.listdir(dir_path ):
    img = image.load_img(dir_path+ '//'+i, target_size = (200,200))
    plt.imshow(img)
    plt.show()

    x= image.img_to_array(img)
    x=np.expand_dims(x,axis = 0)
    images = np.vstack([x])

    val = model.predict(images)
    if val == 0:
        print( 'i am happy')
    else:
        print('i am not happy')